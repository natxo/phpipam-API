#!/usr/bin/env perl

package ipamsh;
use warnings;
use strict;
use Data::Dumper;
use lib 'lib';
use phpipam::API;

# process config file
my %config = parse_config("api.conf");

my $url  = $config{'url'};
my $prot = $config{'protocol'};
my $api  = $config{'api'};
my $user = $config{'user'};
my $pass = $config{'password'};

sub parse_config {
    my $file = shift;
    my %answer;

    open CONFIG, "$file" or die "Couldn't read config file $file: $!\n";
    while (<CONFIG>) {

        # skip blanks and comments
        next if (/^#|^\s*$/);
        my ( $variable, $value ) = split /=/;

        # remove char returns
        chomp $variable;
        chomp $value;

        # assing to hash
        $answer{$variable} = $value;
    }
    close CONFIG;

    return %answer;
}

my $ipam = phpipam::API->new(
    proto    => $prot,
    url      => $url,
    api      => $api,
    user     => $user,
    password => $pass,
);

my $token = undef;

use base qw(Term::Shell);

my @controllers = qw/ sections subnets folders vlans addresses l2domains vrfs devices tools/;

sub prompt_str {
    "ipamsh> ";
}

sub run_show_token {
    my $self = shift;
    print "Authentication token: " . $token, "\n";
}

sub run_logoff {
    my $self = shift;
    my $token = $token;

    eval { $ipam->delete_token($token); };
    if ($@) {
        print $@;
    }
    print "okay bye\n";
    exit 0;
}

sub run_get_sections {
    my $sections = eval { $ipam->get_sections($token); };
    if ($@) {
        print "Something went wrong getting the sections info: " . $@;
    }
    if ( scalar(@$sections) > 0 ) {
        print "Found " . scalar @$sections . " section[s]:\n";

        for my $section (@$sections) {
            print "\t" . $section->{name}, "\n";
        }
    }
    else {
        print "sorry, no sections found yet\n";
    }

}

sub run_get_vlans {
    my $vlans = eval { $ipam->get_vlans( $token ); };
    if ($@) {
        print "Something went wrong getting the sections info: " . $@;
    }
    print Dumper $vlans;
    if ( scalar(@$vlans) > 0 ) {
        print "Found " . scalar @$vlans . " vlan[s]:\n";

        for my $vlan (@$vlans) {
            print "\t" . $vlan->{name}, "\n";
        }
    }
    else {
        print "sorry, no vlans found yet\n";
    }

}

sub init {
    $token = eval { $ipam->get_token; };
    if ($@) {
        print "something went wrong\n";
        print "$@\n";
    }
}

sub fini {
#    run_logoff();
    print "\n";
}

package main;
my $shell = ipamsh->new;
$shell->cmdloop;

