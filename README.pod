=encoding utf8

=head1 NAME

phpipam::API - Provides a Perl5 interface to the phpipam API (https://phpipam.net/api/api_documentation/ )

=head1 SYNOPSIS

    use phpipam::API;
    my $ipam = phpipam::API->new(
        proto       => "http",
        url         => "server.domain.tld/phpipam/api/",
        api         => "name_api_phpipam",
        user        => "user",
        password    => "password",
    );

    # log in, get a token
    my $token = $ipam->get_token;

    # get sections
    my $sections = $ipam->get_sections( $token );

    # get vlans
    my $vlans = $ipam->get_vlans( $token );

    # get subnets
    my $subnets = $ipam->get_subnets( id => $section{id}, token => $token, );

    # get first free ip address in subnet 
    $my $first_free( token => $token, id => $subnet->{id} );

    # add ip to subnet
    $ipam->add_ip(
        ip          => $first_free,
        token       => $token,
        subnetid    => $subnet->{id},
    );

=head1 DESCRIPTION

phpipam::API provides an interface to the phpipam REST API for perl5.

The goal is to support all the existing api controllers:

=over 4

=item *

sections

=item *

subnets

=item *

addresses

=item *

vlans

=item *

l2domains

=item *

vrfs

=item *

tools

=item *

prefix

=back

=head1 REQUIREMENTS

Mojo::UserAgent, part of Mojolicious, easiest installed with cpanm:

    cpanm Mojolicious --notest

=head1 INSTALLATION

This module has not (yet?) been released to the CPAN, but using it is simply a matter of setting lib/phpipam/API.pm in the same directory as the script. Then you can

    use lib 'lib';
    use phpipam::API;

=head1 TODO

=over 2

=item *

document rest of implemented methods

=item *

security: right now only NONE is implemented. Hence use of tls connections strongly recommended (communications clear text over the wire otherwise).

=item *

implement new methods in version phpipam 1.3

=back

=head1 DEBUGGING

export the environment variable MOJO_USERAGENT_DEBUG=1 and run your perl script:

    export MOJO_USERAGENT_DEBUG=1
    ./script.pl

You will be able to follow the whole http client/server conversation (it will post your encoded password so do not leave this variable enabled on your code.

=head1 METHODS

=head2 Constructor

    my $ipam = phpipam::API->new(
        proto => "http",
        url     => "server.domain.tld/phpipam/api/",
        api     => "name_api_phpipam",
        user    => "api user",
        password    => "password",
    );

Arguments:

All compulsory ;-)

=over 4

=item *

proto: http or https. Use https if possible, but not all webservers have implemented http redirection;

=item *

url: hostname part of uri (ip address or hostname.domain.tld) plus path to api url

    $url = "host.domain.tld/phpipam/api/";

In this case the phpipam instance is in the dir phpipam in the root of the webserver.

=item *

api: name of api specified in phpipam to access the api;

=item *

user: user allowed to access the specified api. At least read rights necessary;

=item *

password: self explanatory;

=back

=head2 get_token

See L<http://phpipam.net/api-documentation/#authentication>

This method retrieves the authentication api token. If the request is not successful it dies

    my $token = $ipam->get_token;

=head2 get_token_expiration

    my $exp = $ipam->get_token_expiration( $token );

This method returns the token expiration date

The method requires the $token parameter.

=head2 get_all_users

Retrieve a list of all users (requires rwa permissions on the api)

    my $users = $ipam->get_all_users( $token );

Returns an array reference of hashes with the user info.

The method requires the $token parameter.

=head2 delete_token

Remove the api token.

    $ipam->delete_token( $token );

If assigned to a scalar variable, it returns a json string with info.

The method requires the $token parameter.

=head2 get_rights

Retrieve the rights of the logged in api user

    my $rights = $ipam->get_rights( $token );

Returns a hash ref with 2 keys, one for the permissions and one for controllers.

=head2 get_sections

Retrieve info on a specific section. See L<http://phpipam.net/api-documentation/#sections>.

Returns: array of hashes reference

Requires: token

    my $section = $ipam->get_sections( $token );

=head2 get_sections

Retrieve the sections available in the phpipam instance. See L<http://phpipam.net/api-documentation/#sections>.

Returns: hashes reference

Requires: %args with token and either id or name.

    my $section = $ipam->get_section( token => $token, id => $id );

or

    my $section = $ipam->get_section( token => $token, name => "name" );

=head2 add_section

Add a section to phpipam.

Requires %args with the as keys the parameters specified in L<https://phpipam.net/api/api_documentation/#sections>

    my $newsection = $ipam->add_section(
        token       => $token,
        name        => "whatever",
        description => "none at all",
        showVLAN    => 1,
    );

=head2 del_section

removes a section from phpipam. Requires token and id.

    $ipam->del_section( token => $token, id => $id, );

Returns a json message on error/success.

=head2 update_section

Update a section to phpipam.

Requires %args with the as keys the parameters specified in L<https://phpipam.net/api/api_documentation/#sections>, token and id are compulsory.

    my $update = $ipam->update_section(
        token      => $token,
        id         => $section->{'id'},
        strictMode => '1',
        showVRF    => '1',
        description => 'your little pony',
    );

=head2 get_subnets

get available subnets in a section.

Requires named arguments token and id (section id).

    my $subnets =
        $ipam->get_subnets( token => $token, id => 3,) ;

Returns an array reference of hashes containing the subnet info.

=head2 get_subnet_addresses

get all ip addresses in the chosen subnet.

Requires named arguments token and id (subnet id).

    my $sub_addresses = $ipam->get_subnet_addresses( token => $token, id => 8, );

=head2 get_subnet_usage

get info on usage of the specific subnet.

Requires named arguments token and id (subnet id).

    my $sub_usage = $ipam->get_subnet_usage( token => $token, id => 8, );

=head2 free_first_address

get the first free available ip on subnet.

Requires named options (subnet) id and token.

    my $first = $ipam->free_first_address(
        token      => $token,
        id         => 7
    );

Returns the first available ip.

=head2 search_subnet

get subnet info. Requires token, subnet and mask info.

    my $subnet = $ipam->search_subnet( $token, "192.168.0.0", "24" );

=head2 add_ip

add an ip to a subnet. Requires at least the token, the ip address and
the subnetid.

Other optional named parameters can be found in the address controller
documenation L<https://phpipam.net/api/api_documentation#addresses>. Warning:
the name of the paremeters is case sensitive.

    $ipam->add_ip( token => $token, ip => $first, subnetId => "7", );

=head2 delete_ip

remove ip address from phpipam. Requires token en the ip id.

You can get the ip id using search_ip.

    my $ipaddr = $ipam->search_ip(
        token => $token,
        ip => $first,
    );
    
    if ( scalar @$ipaddr == 1 ) {
        print "$first has id: $$ipaddr[0]->{id}\n";
        $ipam->delete_ip( token => $token, ip_id => $$ipaddr[0]->{id} );
    }

=head2 search_hostname

lookup addresses in phpipam database. Requires token and hostname

    my $name = $ipam->search_hostname( token => $token, hostname => $hostname);

=head2 search_ip

find ip details in phpipam. Requires token and ip.

    my $ipaddr = $ipam->search_ip(
        token => $token,
        ip => $first,
    );

It returns an array ref of hashes

=head2 get_addrs_subnet

get addresess on subnet. Requires token and subnet id. Returns an array ref of hashes.

    my $addrs = $ipam->get_addrs_subnet( token => $token, subnetid => $id );

=head2 get_ip_tags

retrieves all ip tags from phpipam. Requires token.

    my $tags = $ipam->get_ip_tags( token => $token );

=head2 get_ips_tag

get ips assigned to tag id. Requires token and tag id. Returns an array
ref of hashes

    my $dhcp = $ipam->get_ips_tag( token => $token, tagid => "4",);

=head2 get_vlans

retrieve all vlans in phpipam. Requires token, returns array ref of hashes.

    my $vlans = $ipam->get_vlans($token);

=head2 get_l2domains

Retrieves all vlan domains/l2domains. Requires token, returns an array
ref of hashes

    my $l2domains = $ipam->get_l2domains($token);

=head1 ACKNOWLEDGEMENTS

Thanks to the developers of phpipam for a great product, the maintainers of the Perl language and Mojolicious for making this easily possible

